{"changed":true,"filter":false,"title":"DbHandler.php","tooltip":"/api/include/DbHandler.php","value":"<?php\n\n/**\n * Class to handle all db operations\n * This class will have CRUD methods for database tables\n *\n * @author Ravi Tamada\n * @link URL Tutorial link\n */\nclass DbHandler {\n\n    private $conn;\n\n    function __construct() {\n        require_once dirname(__FILE__) . '/DbConnect.php';\n        // opening db connection\n        $db = new DbConnect();\n        $this->conn = $db->connect();\n    }\n\n/* ------------- `usersData` table method ------------------ */\n public function getAllUsers()\n {\n    $sql = \"SELECT * FROM UserData\";\n    $result = $this->conn->query($sql);\n    //$this->conn->close();\n   // echo $result->num_rows;\n   // $this->conn->close();\n    return $result;\n }\n\n    /* ------------- `users` table method ------------------ */\n\n    /**\n     * Creating new user\n     * @param String $name User full name\n     * @param String $email User login email id\n     * @param String $password User login password\n     */\n    public function createUser($name, $email, $password,$Mobile,$SMS) {\n        require_once 'PassHash.php';\n        $response = array();\n      //  echo ' Inside Create User';\n        // First check if user already existed in db\n        if (!$this->isUserExists($email)) {\n          //  echo ' User is not Exists : '.$email;\n            // Generating password hash\n            $password_hash = PassHash::hash($password);\n         //   echo ' User password : '.$password.' to hash : '.$password_hash;\n            // Generating API key\n            $api_key = $this->generateApiKey();\n         //   echo ' User api_key :'.$api_key;\n            \n            // insert query\n            $stmt = $this->conn->prepare(\"INSERT INTO UserData(FullName, Email, password_hash,MobileNumber,ReceiveSMS,api_key,UserRole, CreateDate,UpdatedDate, status) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\");\n            if ( false===$stmt ) {\n              // and since all the following operations need a valid/ready statement object\n              // it doesn't make sense to go on\n              // you might want to use a more sophisticated mechanism than die()\n              // but's it's only an example\n               echo'prepare() failed: ' . htmlspecialchars($this->conn->error);\n            }\n          //  echo 'after prepare() ';\n            $userrole = \"user\";\n            $createddate = date('Y-m-d H:i:s');\n            $status = 1;\n            // echo 'paramters'.$name. $email. $password_hash.$Mobile.$SMS. $api_key.$userrole.$createddate.$createddate;\n            \n           if (!$stmt->bind_param(\"ssssssssss\", $name, $email, $password_hash,$Mobile,$SMS, $api_key,$userrole,$createddate,$createddate,$status))\n           {\n               echo'bind_param() failed: ' . htmlspecialchars($stmt->error);\n           }\n         //  echo 'after bind_param()';\n          //  if ( false===$rc ) {\n              // again execute() is useless if you can't bind the parameters. Bail out somehow.\n          //    echo'bind_param() failed: ' . htmlspecialchars($stmt->error);\n          //  }\n         \n               \n          \n            $result = $stmt->execute() ;//or trigger_error($stmt->error, E_USER_ERROR);\n           \n            if ( false===$result ) {\n              echo'execute() failed: ' . htmlspecialchars($stmt->error);\n            }\n            \n            //each'after execute';\n            $stmt->close();\n\n            // Check for successful insertion\n            if ($result) {\n                // User successfully inserted\n                return USER_CREATED_SUCCESSFULLY;\n            } else {\n                // Failed to create user\n                return USER_CREATE_FAILED;\n            }\n        } else {\n            // User with same email already existed in the db\n            return USER_ALREADY_EXISTED;\n        }\n\n        return $response;\n    }\n\n    /**\n     * Checking user login\n     * @param String $email User login email id\n     * @param String $password User login password\n     * @return boolean User login status success/fail\n     */\n    public function checkLogin($email, $password) {\n        // fetching user by email\n       //  echo'fetching user by email '.$email;\n         $stmt = $this->conn->prepare(\"SELECT password_hash FROM UserData WHERE Email = ?\");\n         if ( false===$stmt ) {\n                      // and since all the following operations need a valid/ready statement object\n                      // it doesn't make sense to go on\n                      // you might want to use a more sophisticated mechanism than die()\n                      // but's it's only an example\n                       echo'prepare() failed: ' . htmlspecialchars($this->conn->error);\n         }\n        $stmt->bind_param(\"s\", $email);\n\n        $stmt->execute();\n//echo'**fetching user by email execute()';\n        $stmt->bind_result($password_hash);\n\n        $stmt->store_result();\n\n        if ($stmt->num_rows > 0) {\n            // Found user with the email\n            // Now verify the password\n //echo'**Found user with the email Now verify the password';\n            $stmt->fetch();\n\n            $stmt->close();\n\n            if (PassHash::check_password($password_hash, $password)) {\n                // User password is correct\n            //    echo'**User password is correct';\n                return TRUE;\n            } else {\n                // user password is incorrect\n             //   echo'**user password is incorrect';\n                return FALSE;\n            }\n        } else {\n            $stmt->close();\n\n            // user not existed with the email\n            return FALSE;\n        }\n    }\n\n    /**\n     * Checking for duplicate user by email address\n     * @param String $email email to check in db\n     * @return boolean\n     */\n    private function isUserExists($email) {\n        $stmt = $this->conn->prepare(\"SELECT UserId from UserData WHERE email = ?\");\n        $stmt->bind_param(\"s\", $email);\n        $stmt->execute();\n        $stmt->store_result();\n        $num_rows = $stmt->num_rows;\n        $stmt->close();\n        return $num_rows > 0;\n    }\n\n    /**\n     * Fetching user by email\n     * @param String $email User email id\n     */\n    public function getUserByEmail($email) {\n        \n      //  echo'getUserByEmail '.$email;\n        \n         $stmt = $this->conn->prepare(\"SELECT fullname, email, api_key, status,UserRole,MobileNumber ,CreateDate FROM UserData WHERE email = ?\");\n         \n          if ( false===$stmt ) {\n                      // and since all the following operations need a valid/ready statement object\n                      // it doesn't make sense to go on\n                      // you might want to use a more sophisticated mechanism than die()\n                      // but's it's only an example\n                       echo'prepare() failed: ' . htmlspecialchars($this->conn->error);\n         }\n         \n        $stmt->bind_param(\"s\", $email);\n        if ($stmt->execute()) {\n            // $user = $stmt->get_result()->fetch_assoc();\n            $stmt->bind_result($name, $email, $api_key, $status,$UserRole,$MobileNumber, $created_at);\n            $stmt->fetch();\n            $user = array();\n            $user[\"name\"] = $name;\n            $user[\"email\"] = $email;\n            $user[\"api_key\"] = $api_key;\n            $user[\"status\"] = $status;\n            $user[\"UserRole\"] = $UserRole;\n            $user[\"MobileNumber\"] = $MobileNumber;\n            $user[\"created_at\"] = $created_at;\n            $stmt->close();\n            return $user;\n        } else {\n            return NULL;\n        }\n    }\n\n    /**\n     * Fetching user api key\n     * @param String $user_id user id primary key in user table\n     */\n    public function getApiKeyById($user_id) {\n        $stmt = $this->conn->prepare(\"SELECT api_key FROM users WHERE id = ?\");\n        $stmt->bind_param(\"i\", $user_id);\n        if ($stmt->execute()) {\n            // $api_key = $stmt->get_result()->fetch_assoc();\n            // TODO\n            $stmt->bind_result($api_key);\n            $stmt->close();\n            return $api_key;\n        } else {\n            return NULL;\n        }\n    }\n\n    /**\n     * Fetching user id by api key\n     * @param String $api_key user api key\n     */\n    public function getUserId($api_key) {\n        $stmt = $this->conn->prepare(\"SELECT id FROM users WHERE api_key = ?\");\n        $stmt->bind_param(\"s\", $api_key);\n        if ($stmt->execute()) {\n            $stmt->bind_result($user_id);\n            $stmt->fetch();\n            // TODO\n            // $user_id = $stmt->get_result()->fetch_assoc();\n            $stmt->close();\n            return $user_id;\n        } else {\n            return NULL;\n        }\n    }\n\n    /**\n     * Validating user api key\n     * If the api key is there in db, it is a valid key\n     * @param String $api_key user api key\n     * @return boolean\n     */\n    public function isValidApiKey($api_key) {\n        $stmt = $this->conn->prepare(\"SELECT id from users WHERE api_key = ?\");\n        $stmt->bind_param(\"s\", $api_key);\n        $stmt->execute();\n        $stmt->store_result();\n        $num_rows = $stmt->num_rows;\n        $stmt->close();\n        return $num_rows > 0;\n    }\n\n    /**\n     * Generating random Unique MD5 String for user Api key\n     */\n    private function generateApiKey() {\n        return md5(uniqid(rand(), true));\n    }\n\n    /* ------------- `tasks` table method ------------------ */\n\n    /**\n     * Creating new task\n     * @param String $user_id user id to whom task belongs to\n     * @param String $task task text\n     */\n    public function createTask($user_id, $task) {\n        $stmt = $this->conn->prepare(\"INSERT INTO tasks(task) VALUES(?)\");\n        $stmt->bind_param(\"s\", $task);\n        $result = $stmt->execute();\n        $stmt->close();\n\n        if ($result) {\n            // task row created\n            // now assign the task to user\n            $new_task_id = $this->conn->insert_id;\n            $res = $this->createUserTask($user_id, $new_task_id);\n            if ($res) {\n                // task created successfully\n                return $new_task_id;\n            } else {\n                // task failed to create\n                return NULL;\n            }\n        } else {\n            // task failed to create\n            return NULL;\n        }\n    }\n\n    /**\n     * Fetching single task\n     * @param String $task_id id of the task\n     */\n    public function getTask($task_id, $user_id) {\n        $stmt = $this->conn->prepare(\"SELECT t.id, t.task, t.status, t.created_at from tasks t, user_tasks ut WHERE t.id = ? AND ut.task_id = t.id AND ut.user_id = ?\");\n        $stmt->bind_param(\"ii\", $task_id, $user_id);\n        if ($stmt->execute()) {\n            $res = array();\n            $stmt->bind_result($id, $task, $status, $created_at);\n            // TODO\n            // $task = $stmt->get_result()->fetch_assoc();\n            $stmt->fetch();\n            $res[\"id\"] = $id;\n            $res[\"task\"] = $task;\n            $res[\"status\"] = $status;\n            $res[\"created_at\"] = $created_at;\n            $stmt->close();\n            return $res;\n        } else {\n            return NULL;\n        }\n    }\n\n    /**\n     * Fetching all user tasks\n     * @param String $user_id id of the user\n     */\n    public function getAllUserTasks($user_id) {\n        $stmt = $this->conn->prepare(\"SELECT t.* FROM tasks t, user_tasks ut WHERE t.id = ut.task_id AND ut.user_id = ?\");\n        $stmt->bind_param(\"i\", $user_id);\n        $stmt->execute();\n        $tasks = $stmt->get_result();\n        $stmt->close();\n        return $tasks;\n    }\n\n    /**\n     * Updating task\n     * @param String $task_id id of the task\n     * @param String $task task text\n     * @param String $status task status\n     */\n    public function updateTask($user_id, $task_id, $task, $status) {\n        $stmt = $this->conn->prepare(\"UPDATE tasks t, user_tasks ut set t.task = ?, t.status = ? WHERE t.id = ? AND t.id = ut.task_id AND ut.user_id = ?\");\n        $stmt->bind_param(\"siii\", $task, $status, $task_id, $user_id);\n        $stmt->execute();\n        $num_affected_rows = $stmt->affected_rows;\n        $stmt->close();\n        return $num_affected_rows > 0;\n    }\n\n    /**\n     * Deleting a task\n     * @param String $task_id id of the task to delete\n     */\n    public function deleteTask($user_id, $task_id) {\n        $stmt = $this->conn->prepare(\"DELETE t FROM tasks t, user_tasks ut WHERE t.id = ? AND ut.task_id = t.id AND ut.user_id = ?\");\n        $stmt->bind_param(\"ii\", $task_id, $user_id);\n        $stmt->execute();\n        $num_affected_rows = $stmt->affected_rows;\n        $stmt->close();\n        return $num_affected_rows > 0;\n    }\n\n    /* ------------- `user_tasks` table method ------------------ */\n\n    /**\n     * Function to assign a task to user\n     * @param String $user_id id of the user\n     * @param String $task_id id of the task\n     */\n    public function createUserTask($user_id, $task_id) {\n        $stmt = $this->conn->prepare(\"INSERT INTO user_tasks(user_id, task_id) values(?, ?)\");\n        $stmt->bind_param(\"ii\", $user_id, $task_id);\n        $result = $stmt->execute();\n\n        if (false === $result) {\n            die('execute() failed: ' . htmlspecialchars($stmt->error));\n        }\n        $stmt->close();\n        return $result;\n    }\n\n}\n\n?>\n","undoManager":{"mark":46,"position":100,"stack":[[{"group":"doc","deltas":[{"start":{"row":119,"column":0},"end":{"row":119,"column":30},"action":"insert","lines":["echo'fetching user by email ';"]}]}],[{"group":"doc","deltas":[{"start":{"row":119,"column":5},"end":{"row":119,"column":6},"action":"insert","lines":["*"]}]}],[{"group":"doc","deltas":[{"start":{"row":119,"column":6},"end":{"row":119,"column":7},"action":"insert","lines":["*"]}]}],[{"group":"doc","deltas":[{"start":{"row":119,"column":30},"end":{"row":119,"column":39},"action":"insert","lines":["execute()"]}]}],[{"group":"doc","deltas":[{"start":{"row":114,"column":80},"end":{"row":114,"column":81},"action":"remove","lines":["e"]},{"start":{"row":114,"column":80},"end":{"row":114,"column":81},"action":"insert","lines":["E"]}]}],[{"group":"doc","deltas":[{"start":{"row":113,"column":38},"end":{"row":113,"column":39},"action":"insert","lines":["."]}]}],[{"group":"doc","deltas":[{"start":{"row":113,"column":39},"end":{"row":113,"column":45},"action":"insert","lines":["$email"]}]}],[{"group":"doc","deltas":[{"start":{"row":114,"column":8},"end":{"row":114,"column":27},"action":"remove","lines":["$stmt = $this->conn"]},{"start":{"row":114,"column":8},"end":{"row":114,"column":30},"action":"insert","lines":[" $stmt = $this->conn->"]}]}],[{"group":"doc","deltas":[{"start":{"row":114,"column":29},"end":{"row":114,"column":30},"action":"remove","lines":[">"]}]}],[{"group":"doc","deltas":[{"start":{"row":114,"column":28},"end":{"row":114,"column":29},"action":"remove","lines":["-"]}]}],[{"group":"doc","deltas":[{"start":{"row":115,"column":0},"end":{"row":121,"column":13},"action":"insert","lines":[" if ( false===$stmt ) {","              // and since all the following operations need a valid/ready statement object","              // it doesn't make sense to go on","              // you might want to use a more sophisticated mechanism than die()","              // but's it's only an example","               echo'prepare() failed: ' . htmlspecialchars($this->conn->error);","            }"]}]}],[{"group":"doc","deltas":[{"start":{"row":121,"column":12},"end":{"row":121,"column":13},"action":"remove","lines":["}"]}]}],[{"group":"doc","deltas":[{"start":{"row":121,"column":12},"end":{"row":121,"column":13},"action":"insert","lines":["}"]},{"start":{"row":121,"column":0},"end":{"row":121,"column":12},"action":"remove","lines":["            "]},{"start":{"row":121,"column":0},"end":{"row":121,"column":1},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":115,"column":0},"end":{"row":115,"column":4},"action":"insert","lines":["    "]},{"start":{"row":116,"column":0},"end":{"row":116,"column":4},"action":"insert","lines":["    "]},{"start":{"row":117,"column":0},"end":{"row":117,"column":4},"action":"insert","lines":["    "]},{"start":{"row":118,"column":0},"end":{"row":118,"column":4},"action":"insert","lines":["    "]},{"start":{"row":119,"column":0},"end":{"row":119,"column":4},"action":"insert","lines":["    "]},{"start":{"row":120,"column":0},"end":{"row":120,"column":4},"action":"insert","lines":["    "]},{"start":{"row":121,"column":0},"end":{"row":121,"column":4},"action":"insert","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":115,"column":0},"end":{"row":115,"column":4},"action":"insert","lines":["    "]},{"start":{"row":116,"column":0},"end":{"row":116,"column":4},"action":"insert","lines":["    "]},{"start":{"row":117,"column":0},"end":{"row":117,"column":4},"action":"insert","lines":["    "]},{"start":{"row":118,"column":0},"end":{"row":118,"column":4},"action":"insert","lines":["    "]},{"start":{"row":119,"column":0},"end":{"row":119,"column":4},"action":"insert","lines":["    "]},{"start":{"row":120,"column":0},"end":{"row":120,"column":4},"action":"insert","lines":["    "]},{"start":{"row":121,"column":0},"end":{"row":121,"column":4},"action":"insert","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":114,"column":65},"end":{"row":114,"column":74},"action":"remove","lines":["UsersData"]},{"start":{"row":114,"column":65},"end":{"row":114,"column":73},"action":"insert","lines":["UserData"]}]}],[{"group":"doc","deltas":[{"start":{"row":175,"column":91},"end":{"row":175,"column":96},"action":"remove","lines":["users"]},{"start":{"row":175,"column":91},"end":{"row":175,"column":99},"action":"insert","lines":["UserData"]}]}],[{"group":"doc","deltas":[{"start":{"row":174,"column":44},"end":{"row":175,"column":0},"action":"insert","lines":["",""]},{"start":{"row":175,"column":0},"end":{"row":175,"column":8},"action":"insert","lines":["        "]}]}],[{"group":"doc","deltas":[{"start":{"row":175,"column":8},"end":{"row":176,"column":0},"action":"insert","lines":["",""]},{"start":{"row":176,"column":0},"end":{"row":176,"column":8},"action":"insert","lines":["        "]}]}],[{"group":"doc","deltas":[{"start":{"row":175,"column":8},"end":{"row":176,"column":0},"action":"insert","lines":["",""]},{"start":{"row":176,"column":0},"end":{"row":176,"column":8},"action":"insert","lines":["        "]}]}],[{"group":"doc","deltas":[{"start":{"row":176,"column":8},"end":{"row":176,"column":45},"action":"insert","lines":["echo'fetching user by email '.$email;"]}]}],[{"group":"doc","deltas":[{"start":{"row":176,"column":13},"end":{"row":176,"column":35},"action":"remove","lines":["fetching user by email"]},{"start":{"row":176,"column":13},"end":{"row":176,"column":27},"action":"insert","lines":["getUserByEmail"]}]}],[{"group":"doc","deltas":[{"start":{"row":178,"column":8},"end":{"row":178,"column":29},"action":"remove","lines":["$stmt = $this->conn->"]},{"start":{"row":178,"column":8},"end":{"row":178,"column":30},"action":"insert","lines":[" $stmt = $this->conn->"]}]}],[{"group":"doc","deltas":[{"start":{"row":178,"column":119},"end":{"row":179,"column":0},"action":"insert","lines":["",""]},{"start":{"row":179,"column":0},"end":{"row":179,"column":9},"action":"insert","lines":["         "]}]}],[{"group":"doc","deltas":[{"start":{"row":179,"column":9},"end":{"row":180,"column":0},"action":"insert","lines":["",""]},{"start":{"row":180,"column":0},"end":{"row":180,"column":9},"action":"insert","lines":["         "]}]}],[{"group":"doc","deltas":[{"start":{"row":179,"column":9},"end":{"row":180,"column":0},"action":"insert","lines":["",""]},{"start":{"row":180,"column":0},"end":{"row":180,"column":9},"action":"insert","lines":["         "]}]}],[{"group":"doc","deltas":[{"start":{"row":180,"column":9},"end":{"row":186,"column":10},"action":"insert","lines":[" if ( false===$stmt ) {","                      // and since all the following operations need a valid/ready statement object","                      // it doesn't make sense to go on","                      // you might want to use a more sophisticated mechanism than die()","                      // but's it's only an example","                       echo'prepare() failed: ' . htmlspecialchars($this->conn->error);","         }"]}]}],[{"group":"doc","deltas":[{"start":{"row":178,"column":46},"end":{"row":178,"column":47},"action":"insert","lines":["f"]}]}],[{"group":"doc","deltas":[{"start":{"row":178,"column":47},"end":{"row":178,"column":48},"action":"insert","lines":["u"]}]}],[{"group":"doc","deltas":[{"start":{"row":178,"column":48},"end":{"row":178,"column":49},"action":"insert","lines":["l"]}]}],[{"group":"doc","deltas":[{"start":{"row":178,"column":49},"end":{"row":178,"column":50},"action":"insert","lines":["l"]}]}],[{"group":"doc","deltas":[{"start":{"row":178,"column":87},"end":{"row":178,"column":90},"action":"remove","lines":["_at"]},{"start":{"row":178,"column":87},"end":{"row":178,"column":88},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":178,"column":88},"end":{"row":178,"column":89},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":178,"column":89},"end":{"row":178,"column":90},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":178,"column":80},"end":{"row":178,"column":90},"action":"remove","lines":["createdate"]},{"start":{"row":178,"column":80},"end":{"row":178,"column":90},"action":"insert","lines":["CreateDate"]}]}],[{"group":"doc","deltas":[{"start":{"row":176,"column":6},"end":{"row":176,"column":7},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":176,"column":7},"end":{"row":176,"column":8},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":144,"column":13},"end":{"row":144,"column":14},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":144,"column":14},"end":{"row":144,"column":15},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":140,"column":12},"end":{"row":140,"column":13},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":140,"column":13},"end":{"row":140,"column":14},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":133,"column":1},"end":{"row":133,"column":2},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":133,"column":2},"end":{"row":133,"column":3},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":125,"column":0},"end":{"row":125,"column":1},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":125,"column":1},"end":{"row":125,"column":2},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":113,"column":7},"end":{"row":113,"column":8},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":113,"column":8},"end":{"row":113,"column":9},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":178,"column":80},"end":{"row":178,"column":81},"action":"insert","lines":[","]}]}],[{"group":"doc","deltas":[{"start":{"row":178,"column":79},"end":{"row":178,"column":80},"action":"insert","lines":["U"]}]}],[{"group":"doc","deltas":[{"start":{"row":178,"column":80},"end":{"row":178,"column":81},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":178,"column":81},"end":{"row":178,"column":82},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":178,"column":82},"end":{"row":178,"column":83},"action":"insert","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":178,"column":83},"end":{"row":178,"column":84},"action":"insert","lines":["R"]}]}],[{"group":"doc","deltas":[{"start":{"row":178,"column":84},"end":{"row":178,"column":85},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":178,"column":85},"end":{"row":178,"column":86},"action":"insert","lines":["l"]}]}],[{"group":"doc","deltas":[{"start":{"row":178,"column":86},"end":{"row":178,"column":87},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":178,"column":87},"end":{"row":178,"column":88},"action":"insert","lines":[","]}]}],[{"group":"doc","deltas":[{"start":{"row":178,"column":88},"end":{"row":178,"column":89},"action":"insert","lines":["M"]}]}],[{"group":"doc","deltas":[{"start":{"row":178,"column":89},"end":{"row":178,"column":90},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":178,"column":90},"end":{"row":178,"column":91},"action":"insert","lines":["b"]}]}],[{"group":"doc","deltas":[{"start":{"row":178,"column":91},"end":{"row":178,"column":92},"action":"insert","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":178,"column":92},"end":{"row":178,"column":93},"action":"insert","lines":["l"]}]}],[{"group":"doc","deltas":[{"start":{"row":178,"column":93},"end":{"row":178,"column":94},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":178,"column":88},"end":{"row":178,"column":94},"action":"remove","lines":["Mobile"]},{"start":{"row":178,"column":88},"end":{"row":178,"column":100},"action":"insert","lines":["MobileNumber"]}]}],[{"group":"doc","deltas":[{"start":{"row":191,"column":64},"end":{"row":191,"column":65},"action":"insert","lines":[","]}]}],[{"group":"doc","deltas":[{"start":{"row":191,"column":65},"end":{"row":191,"column":66},"action":"insert","lines":[","]}]}],[{"group":"doc","deltas":[{"start":{"row":191,"column":64},"end":{"row":191,"column":65},"action":"insert","lines":["$"]}]}],[{"group":"doc","deltas":[{"start":{"row":191,"column":65},"end":{"row":191,"column":66},"action":"insert","lines":["U"]}]}],[{"group":"doc","deltas":[{"start":{"row":191,"column":66},"end":{"row":191,"column":67},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":191,"column":67},"end":{"row":191,"column":68},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":191,"column":68},"end":{"row":191,"column":69},"action":"insert","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":191,"column":69},"end":{"row":191,"column":70},"action":"insert","lines":["R"]}]}],[{"group":"doc","deltas":[{"start":{"row":191,"column":70},"end":{"row":191,"column":71},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":191,"column":71},"end":{"row":191,"column":72},"action":"insert","lines":["l"]}]}],[{"group":"doc","deltas":[{"start":{"row":191,"column":72},"end":{"row":191,"column":73},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":191,"column":74},"end":{"row":191,"column":75},"action":"insert","lines":["$"]}]}],[{"group":"doc","deltas":[{"start":{"row":191,"column":75},"end":{"row":191,"column":76},"action":"insert","lines":["M"]}]}],[{"group":"doc","deltas":[{"start":{"row":191,"column":76},"end":{"row":191,"column":77},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":191,"column":77},"end":{"row":191,"column":78},"action":"insert","lines":["b"]}]}],[{"group":"doc","deltas":[{"start":{"row":191,"column":78},"end":{"row":191,"column":79},"action":"insert","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":191,"column":79},"end":{"row":191,"column":80},"action":"insert","lines":["l"]}]}],[{"group":"doc","deltas":[{"start":{"row":191,"column":80},"end":{"row":191,"column":81},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":191,"column":81},"end":{"row":191,"column":82},"action":"insert","lines":["N"]}]}],[{"group":"doc","deltas":[{"start":{"row":191,"column":82},"end":{"row":191,"column":83},"action":"insert","lines":["u"]}]}],[{"group":"doc","deltas":[{"start":{"row":191,"column":83},"end":{"row":191,"column":84},"action":"insert","lines":["m"]}]}],[{"group":"doc","deltas":[{"start":{"row":191,"column":84},"end":{"row":191,"column":85},"action":"insert","lines":["b"]}]}],[{"group":"doc","deltas":[{"start":{"row":191,"column":85},"end":{"row":191,"column":86},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":191,"column":86},"end":{"row":191,"column":87},"action":"insert","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":197,"column":38},"end":{"row":198,"column":0},"action":"insert","lines":["",""]},{"start":{"row":198,"column":0},"end":{"row":198,"column":12},"action":"insert","lines":["            "]}]}],[{"group":"doc","deltas":[{"start":{"row":198,"column":12},"end":{"row":198,"column":38},"action":"insert","lines":["$user[\"status\"] = $status;"]}]}],[{"group":"doc","deltas":[{"start":{"row":198,"column":38},"end":{"row":199,"column":0},"action":"insert","lines":["",""]},{"start":{"row":199,"column":0},"end":{"row":199,"column":12},"action":"insert","lines":["            "]}]}],[{"group":"doc","deltas":[{"start":{"row":199,"column":12},"end":{"row":199,"column":38},"action":"insert","lines":["$user[\"status\"] = $status;"]}]}],[{"group":"doc","deltas":[{"start":{"row":198,"column":19},"end":{"row":198,"column":25},"action":"remove","lines":["status"]},{"start":{"row":198,"column":19},"end":{"row":198,"column":20},"action":"insert","lines":["U"]}]}],[{"group":"doc","deltas":[{"start":{"row":198,"column":20},"end":{"row":198,"column":21},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":198,"column":21},"end":{"row":198,"column":22},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":198,"column":22},"end":{"row":198,"column":23},"action":"insert","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":198,"column":19},"end":{"row":198,"column":23},"action":"remove","lines":["User"]},{"start":{"row":198,"column":19},"end":{"row":198,"column":27},"action":"insert","lines":["UserRole"]}]}],[{"group":"doc","deltas":[{"start":{"row":198,"column":32},"end":{"row":198,"column":39},"action":"remove","lines":["$status"]},{"start":{"row":198,"column":32},"end":{"row":198,"column":41},"action":"insert","lines":["$UserRole"]}]}],[{"group":"doc","deltas":[{"start":{"row":199,"column":30},"end":{"row":199,"column":37},"action":"remove","lines":["$status"]},{"start":{"row":199,"column":30},"end":{"row":199,"column":43},"action":"insert","lines":["$MobileNumber"]}]}],[{"group":"doc","deltas":[{"start":{"row":199,"column":19},"end":{"row":199,"column":25},"action":"remove","lines":["status"]},{"start":{"row":199,"column":19},"end":{"row":199,"column":32},"action":"insert","lines":["$MobileNumber"]}]}],[{"group":"doc","deltas":[{"start":{"row":199,"column":19},"end":{"row":199,"column":20},"action":"remove","lines":["$"]}]}]]},"ace":{"folds":[],"scrolltop":3987,"scrollleft":0,"selection":{"start":{"row":199,"column":19},"end":{"row":199,"column":31},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":2,"state":"php-doc-start","mode":"ace/mode/php"}},"timestamp":1426110210000}